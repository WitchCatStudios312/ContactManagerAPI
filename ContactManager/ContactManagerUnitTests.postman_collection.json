{
	"info": {
		"_postman_id": "4517b35c-28ad-4a28-9bf5-9dda2d82de6a",
		"name": "ContactManagerUnitTests",
		"description": "Unit Tests for the ContactsManager Solution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By ID Status Code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.firstName).to.eql(\"David\");\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"});\r",
							"pm.test(\"Get By ID Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.firstName).to.eql(\"David\");\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"});\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts/1",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"1"
					]
				},
				"description": "Get the contact with ID 1"
			},
			"response": []
		},
		{
			"name": "Get Contact By Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By Email Status Code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get By Email Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].firstName).to.eql(\"David\");\r",
							"    pm.expect(responseJson[0].id).to.eql(1);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts?email=rose",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts"
					],
					"query": [
						{
							"key": "email",
							"value": "rose"
						}
					]
				},
				"description": "Get the contacts with email containing \"sandit\""
			},
			"response": []
		},
		{
			"name": "Get By Phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By Phone Status Code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get By Phone Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].firstName).to.eql(\"Frankie\");\r",
							"    pm.expect(responseJson[0].id).to.eql(5);\r",
							"});\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts?phone=8",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts"
					],
					"query": [
						{
							"key": "phone",
							"value": "8"
						}
					]
				},
				"description": "Get the contacts by phone wildcard search"
			},
			"response": []
		},
		{
			"name": "Get By City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By City Status Code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get By City Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].firstName).to.eql(\"Leslie\");\r",
							"    pm.expect(responseJson[0].id).to.eql(2);\r",
							"});\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts/GetByCityState?city=Pawnee",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"GetByCityState"
					],
					"query": [
						{
							"key": "city",
							"value": "Pawnee"
						}
					]
				},
				"description": "Get the contacts by City"
			},
			"response": []
		},
		{
			"name": "Get By State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By State Status Code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get By State Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].firstName).to.eql(\"David\");\r",
							"    pm.expect(responseJson[0].id).to.eql(1);\r",
							"});\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts/GetByCityState?state=ON",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"GetByCityState"
					],
					"query": [
						{
							"key": "state",
							"value": "ON"
						}
					]
				},
				"description": "Get the contacts by state"
			},
			"response": []
		},
		{
			"name": "Post Contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Create Contact Value Test\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.firstName).to.eql(\"Ron\");\r",
							"    pm.expect(responseJson.lastName).to.eql(\"Swanson\");\r",
							"});\r",
							"var schema = {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"firstName\": {\"type\": \"string\"},\r",
							"    \"lastName\": {\"type\": \"string\"},\r",
							"    \"company\": {\"type\": \"string\"},\r",
							"    \"profileImage\": {\"type\": \"string\"},\r",
							"    \"email\": {\"type\": \"string\"},\r",
							"    \"birthDate\": {\"type\": \"date\"},\r",
							"    \"workPhone\": {\"type\": \"string\"},\r",
							"    \"homePhone\": {\"type\": \"string\"},\r",
							"    \"address1\": {\"type\": \"string\"},\r",
							"    \"address2\": {\"type\": \"string\"},\r",
							"    \"city\": {\"type\": \"string\"},\r",
							"    \"state\": {\"type\": \"string\"},\r",
							"    \"zip\": {\"type\": \"string\"},\r",
							"    \"country\": {\"type\": \"string\"},\r",
							"    \"notes\": {\"type\": \"string\"}\r",
							"};\r",
							"var data1 =  pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"firstName\": \"Ron\",\r\n        \"lastName\": \"Swanson\",\r\n        \"company\": \"Pawnee Parks Department\",\r\n        \"profileImage\": \"\",\r\n        \"email\": \"\",\r\n        \"birthDate\": \"1970-06-26T00:00:00\",\r\n        \"workPhone\": \"\",\r\n        \"homePhone\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"Pawnee\",\r\n        \"state\": \"IN\",\r\n        \"zip\": \"\",\r\n        \"country\": \"US\",\r\n        \"notes\": \"Duke Silver\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:44397/api/Contacts",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts"
					]
				},
				"description": "Create a new contact for Ron Swanson"
			},
			"response": []
		},
		{
			"name": "Delete Contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful Delete request\", function () {\r",
							"    //if the contact existed we get a 204, else we get a 404\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts/5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"5"
					]
				},
				"description": "Delete the Ron Swanson Contact"
			},
			"response": []
		},
		{
			"name": "Put Contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get By Phone Status Code is 204\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\": 4,\r\n        \"firstName\": \"Frank\",\r\n        \"lastName\": \"Reynolds\",\r\n        \"company\": \"Wolf Cola\",\r\n        \"profileImage\": \"\",\r\n        \"profileImageBytes\": \"\",\r\n        \"email\": \"frank@paddyspub.com\",\r\n        \"birthDate\": \"1944-10-01T00:00:00\",\r\n        \"workPhone\": \"(666) 666-6666\",\r\n        \"homePhone\": \"(777) 777-7777\",\r\n        \"address1\": \"Paddy's Pub\",\r\n        \"address2\": \"\",\r\n        \"city\": \"Philadelphia\",\r\n        \"state\": \"PA\",\r\n        \"zip\": \"19103\",\r\n        \"country\": \"US\",\r\n        \"notes\": \"The Warthog. Wolf Cola. Dr. Mantis Toboggan\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:44397/api/Contacts/4",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"4"
					]
				},
				"description": "Update the contact email address"
			},
			"response": []
		},
		{
			"name": "View Profile Bytes Test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44397/api/Contacts/ViewContactImage?id=4",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44397",
					"path": [
						"api",
						"Contacts",
						"ViewContactImage"
					],
					"query": [
						{
							"key": "id",
							"value": "4"
						}
					]
				},
				"description": "View the profile image sent in the Put Test"
			},
			"response": []
		}
	]
}